name: soleva

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: soleva_postgres
    restart: unless-stopped
    env_file:
      - docker.env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    # Remove external port exposure for security
    # ports:
    #   - "5432:5432"
    networks:
      - soleva_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Message Broker
  redis:
    image: redis:7.4.5
    container_name: soleva_redis
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    env_file:
      - docker.env
    volumes:
      - redis_data:/data
    # Remove external port exposure for security
    # ports:
    #   - "6379:6379"
    networks:
      - soleva_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend
  backend:
    build:
      context: ./soleva back end
      dockerfile: Dockerfile
    container_name: soleva_backend
    restart: unless-stopped
    env_file:
      - docker.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Optional: Uncomment for debugging - NOT recommended for production
    # ports:
    #   - "8001:8000"
    # Let the entrypoint script handle startup
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - backend_logs:/app/logs
    networks:
      - soleva_network
    healthcheck:
      test: ["CMD", "python", "manage.py", "check", "--deploy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker
  celery:
    build:
      context: ./soleva back end
      dockerfile: Dockerfile
    container_name: soleva_celery
    restart: unless-stopped
    env_file:
      - docker.env
    command: celery -A soleva_backend worker -l info --concurrency=4
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - media_volume:/app/media
      - celery_logs:/app/logs
    networks:
      - soleva_network
    healthcheck:
      test: ["CMD-SHELL", "celery -A soleva_backend inspect active_queues || echo 'Celery worker active'"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 60s

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./soleva back end
      dockerfile: Dockerfile
    container_name: soleva_celery_beat
    restart: unless-stopped
    env_file:
      - docker.env
    command: celery -A soleva_backend beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - celery_logs:/app/logs
    networks:
      - soleva_network

  # React Frontend
  frontend:
    build:
      context: ./soleva front end
      dockerfile: Dockerfile
    container_name: soleva_frontend
    restart: unless-stopped
    env_file:
      - docker.env
    ports:
      - "8000:80"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - frontend_build:/usr/share/nginx/html
    networks:
      - soleva_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy & SSL
  nginx:
    image: nginx:alpine
    container_name: soleva_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
      - frontend_build:/var/www/html:ro
      - nginx_logs:/var/log/nginx
      - certbot_webroot:/var/www/certbot:ro
      - letsencrypt_certs:/etc/letsencrypt:ro
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - soleva_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "--max-redirect=5", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: soleva_certbot
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
      - certbot_logs:/var/log/letsencrypt
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email --non-interactive --keep-until-expiring -d ${DOMAIN} -d www.${DOMAIN}
    depends_on:
      - nginx
    networks:
      - soleva_network
    restart: "no"

  # SSL Certificate Renewal
  certbot-renew:
    image: certbot/certbot
    container_name: soleva_certbot_renew
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
      - certbot_logs:/var/log/letsencrypt
    command: renew --quiet --no-self-upgrade
    depends_on:
      - nginx
    networks:
      - soleva_network
    restart: "no"
    profiles:
      - renewal

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  frontend_build:
  backend_logs:
  celery_logs:
  nginx_logs:
  letsencrypt_certs:
  certbot_webroot:
  certbot_logs:

networks:
  soleva_network:
    driver: bridge