# Upstream definitions
upstream backend {
    server backend:8000 fail_timeout=0;
}

upstream frontend {
    server frontend:80 fail_timeout=0;
}

# Note: Frontend is served as static files from /var/www/html
# The frontend container builds the app but nginx serves the static files directly

# HTTP server for SSL validation and redirects
server {
    listen 80;
    server_name solevaeg.com www.solevaeg.com;
    
    root /var/www/html;
    index index.html;
    
    # Let's Encrypt challenge location - CRITICAL for SSL validation
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
        allow all;
    }
    
    # Health check for load balancer
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # API requests to backend
    location /api/ {
        proxy_pass http://backend:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Serve frontend files with SPA fallback
    location / {
        try_files $uri $uri/ /index.html;
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
        }
        
        # No cache for HTML files
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
        }
    }
}

# HTTPS redirects for alternate domains
server {
    listen 443 ssl http2;
    server_name www.solevaeg.com;

    # SSL Configuration - Use Let's Encrypt if available, fallback to self-signed
    ssl_certificate /etc/letsencrypt/live/solevaeg.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/solevaeg.com/privkey.pem;

    # Fallback to self-signed certificates if Let's Encrypt certs don't exist
    ssl_certificate /etc/nginx/ssl/selfsigned/solevaeg.com.crt;
    ssl_certificate_key /etc/nginx/ssl/selfsigned/solevaeg.com.key;

    # Include SSL settings
    include /etc/nginx/conf.d/ssl.conf;

    # 301 redirect to primary domain
    return 301 https://solevaeg.com$request_uri;
}

# Main server configuration
server {
    listen 443 ssl http2;
    server_name solevaeg.com;

    # SSL Configuration - Use Let's Encrypt if available, fallback to self-signed
    ssl_certificate /etc/letsencrypt/live/solevaeg.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/solevaeg.com/privkey.pem;

    # Fallback to self-signed certificates if Let's Encrypt certs don't exist
    ssl_certificate /etc/nginx/ssl/selfsigned/solevaeg.com.crt;
    ssl_certificate_key /etc/nginx/ssl/selfsigned/solevaeg.com.key;

    # Include SSL settings
    include /etc/nginx/conf.d/ssl.conf;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.google-analytics.com https://connect.facebook.net https://analytics.tiktok.com https://sc-static.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https: blob:; connect-src 'self' https://api.solevaeg.com https://www.google-analytics.com https://analytics.tiktok.com; frame-src 'none';" always;
    
    # Rate limiting
    limit_req zone=general burst=20 nodelay;
    
    # Backend API
    location /api/ {
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Rate limiting for API
        limit_req zone=api burst=50 nodelay;
        
        # CORS headers for API
        add_header Access-Control-Allow-Origin "https://solevaeg.com" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
        add_header Access-Control-Allow-Credentials true always;
        
        # Handle preflight OPTIONS requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "https://solevaeg.com";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
            add_header Access-Control-Allow-Credentials true;
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }
    
    # Django Admin
    location /admin/ {
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Additional security for admin
        limit_req zone=login burst=5 nodelay;
        
        # Optional: IP whitelist for admin access
        # allow YOUR_ADMIN_IP;
        # deny all;
    }
    
    # Static files (Django)
    location /static/ {
        alias /var/www/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # Security headers for static files
        add_header X-Content-Type-Options nosniff;
        
        # CORS for fonts
        location ~* \.(woff|woff2|ttf|eot)$ {
            add_header Access-Control-Allow-Origin "*";
        }
    }
    
    # Media files (uploads)
    location /media/ {
        alias /var/www/media/;
        expires 1y;
        add_header Cache-Control "public";
        
        # Security for uploaded files
        add_header X-Content-Type-Options nosniff;
        
        # Prevent PHP execution in media directory
        location ~* \.php$ {
            deny all;
        }
    }
    
    # Special auth endpoints with stricter rate limiting
    location /api/auth/ {
        limit_req zone=login burst=10 nodelay;
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Frontend (React SPA) - serve static files
    location / {
        root /var/www/html;
        index index.html;
        try_files $uri $uri/ /index.html;

        # Cache control for HTML files
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
        }

        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
        }
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Security.txt
    location /.well-known/security.txt {
        alias /var/www/static/security.txt;
    }
    
    # Robots.txt
    location = /robots.txt {
        root /var/www/html;
        expires 1d;
    }

    # Sitemap
    location = /sitemap.xml {
        root /var/www/html;
        expires 1d;
    }

    # Favicon
    location = /favicon.ico {
        root /var/www/html;
        expires 1y;
    }
    
    # Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Block access to version control
    location ~ /\.git {
        deny all;
    }
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
}
